version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.0.0
  aws-ecs: circleci/aws-ecs@3.2

commands:
  build-image: aws-ecr/build-image

parameters:
  docker-container:
    type: string
    default: "beckend-daploy"

jobs:
  build-and-deploy:
    docker:
      - image: circleci/node:14
      - image: docker:20.10.9
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Install SSH
          command: |
            set -x
            
            echo $SSH_PRIVATE_KEY | base64 --decode > ./privateKey.pem
            chmod 400 privateKey.pem
      - run:
          name: Build Docker Image
          command: |
            if [ ! -f Dockerfile ]; then
                echo "Dockerfile not found"
                exit 1
            fi
            docker build -t << pipeline.parameters.docker-container >>:latest .
      - run:
          name: Compress Docker Image to .tar.gz
          command: |
            docker save << pipeline.parameters.docker-container >>:latest | gzip > << pipeline.parameters.docker-container >>.tar.gz
            echo 'Compress Docker Image'
            echo 'List of Docker Images'
            docker images
      - run:
          name: Transfer Compressed Docker Image to Remote VM
          command: |
            scp -o "StrictHostKeyChecking=no" -i ./privateKey.pem ./<< pipeline.parameters.docker-container >>.tar.gz ubuntu@$HOST:~/<< pipeline.parameters.docker-container >>.tar.gz
      - run:
          name: Decompress Docker Image on Remote VM and Run It
          command: |
            ssh -o "StrictHostKeyChecking=no" -i ./privateKey.pem ubuntu@$HOST 'sudo gunzip -c ./<< pipeline.parameters.docker-container >>.tar.gz | sudo docker load; sudo rm ./<< pipeline.parameters.docker-container >>.tar.gz'
      - run:
          name: Stop existing Docker Container and Remove Docker Image
          command: |
            ssh -o "StrictHostKeyChecking=no" -i ./privateKey.pem ubuntu@$HOST 'if [ "$(sudo docker ps -q -f name=<< pipeline.parameters.docker-container >>)" ]; then sudo docker stop << pipeline.parameters.docker-container >> && sudo docker rmi -f $(sudo docker inspect --format='{{.Image}}' << pipeline.parameters.docker-container >>) && sudo docker rm << pipeline.parameters.docker-container >>; fi'
      - run:
          name: Run Docker Image
          command: |
            ssh -o "StrictHostKeyChecking=no" -i ./privateKey.pem ubuntu@$HOST 'sudo docker run -p 80:2023 -e "SPRING_PROFILES_ACTIVE=codewise" --name << pipeline.parameters.docker-container >> -d << pipeline.parameters.docker-container >>:latest'
workflows:
  dev:
    jobs:
      - build-and-deploy:
          filters:
            branches:
              only:
                - master
